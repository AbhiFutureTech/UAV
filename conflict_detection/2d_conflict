from typing import List
from .models import Mission, ConflictReport
from datetime import datetime
import numpy as np

def check_2d_conflict(
    primary_mission: Mission,
    other_missions: List[Mission],
    safety_buffer: float = 5.0
) -> ConflictReport:
    conflicts = []
    conflicting_drones = set()
    
    # Interpolate primary mission trajectory
    primary_traj = interpolate_trajectory(primary_mission)
    
    for other_mission in other_missions:
        # Skip if time windows don't overlap
        if not time_windows_overlap(primary_mission, other_mission):
            continue
            
        other_traj = interpolate_trajectory(other_mission)
        
        # Check for spatial conflicts during overlapping time
        for t in get_overlapping_times(primary_traj, other_traj):
            primary_pos = get_position_at_time(primary_traj, t)
            other_pos = get_position_at_time(other_traj, t)
            
            distance = np.linalg.norm(
                np.array(primary_pos[:2]) - np.array(other_pos[:2])
            )
            
            if distance < safety_buffer:
                conflict = {
                    "time": t,
                    "location": primary_pos[:2],
                    "distance": distance,
                    "conflicting_drone": other_mission.drone_id
                }
                conflicts.append(conflict)
                conflicting_drones.add(other_mission.drone_id)
    
    return ConflictReport(
        is_conflict=len(conflicts) > 0,
        conflicts=conflicts,
        conflicting_drones=list(conflicting_drones)
    )
